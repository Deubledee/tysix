{
  "_args": [
    [
      "shady-css-parser@https://registry.npmjs.org/shady-css-parser/-/shady-css-parser-0.1.0.tgz",
      "/home/diogo/www/node_modules/polymer-cli"
    ]
  ],
  "_from": "shady-css-parser@https://registry.npmjs.org/shady-css-parser/-/shady-css-parser-0.1.0.tgz",
  "_id": "shady-css-parser@0.1.0",
  "_inCache": true,
  "_location": "/polymer-cli/shady-css-parser",
  "_phantomChildren": {},
  "_requested": {
    "name": "shady-css-parser",
    "raw": "shady-css-parser@https://registry.npmjs.org/shady-css-parser/-/shady-css-parser-0.1.0.tgz",
    "rawSpec": "https://registry.npmjs.org/shady-css-parser/-/shady-css-parser-0.1.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/shady-css-parser/-/shady-css-parser-0.1.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/polymer-cli/css-slam",
    "/polymer-cli/polymer-analyzer",
    "/polymer-cli/polymer-linter"
  ],
  "_resolved": "https://registry.npmjs.org/shady-css-parser/-/shady-css-parser-0.1.0.tgz",
  "_shasum": "534dc79c8ca5884c5ed92a4e5a13d6d863bca428",
  "_shrinkwrap": null,
  "_spec": "shady-css-parser@https://registry.npmjs.org/shady-css-parser/-/shady-css-parser-0.1.0.tgz",
  "_where": "/home/diogo/www/node_modules/polymer-cli",
  "author": {
    "name": "The Polymer Authors"
  },
  "bugs": {
    "url": "https://github.com/PolymerLabs/shady-css-parser/issues"
  },
  "dependencies": {},
  "description": "A fast, small and flexible CSS parser.",
  "devDependencies": {
    "@types/chai": "^4.0.1",
    "@types/chai-subset": "^1.3.0",
    "@types/mocha": "^2.2.39",
    "@types/node": "^8.0.13",
    "chai": "^4.1.0",
    "chai-subset": "^1.5.0",
    "clang-format": "^1.0.53",
    "mocha": "^3.0.0",
    "source-map-support": "^0.4.15",
    "tslint": "^5.5.0",
    "typescript": "^2.4.1",
    "watchy": "^0.6.7"
  },
  "homepage": "https://github.com/PolymerLabs/shady-css-parser#readme",
  "license": "BSD-3-Clause",
  "main": "dist/shady-css.js",
  "name": "shady-css-parser",
  "optionalDependencies": {},
  "readme": "## Shady CSS Parser\n\nThe motivation for Shady CSS Parser is to provide a fast, small and flexible\nCSS parser suitable for facilitating runtime parsing and transformation of CSS.\nThe Polymer library and the Polymer Designer tool are both example cases where\nfast and flexible CSS parsing and transformation is a critical feature.\n\n### Goals\n\n -  Feasibility of being used in conjunction with Polymer or Polymer\nDesigner.\n -  Parse CSS loosely and flexibly. This parser is not spec-compliant, however\n it will parse all spec-compliant CSS.\n -  Parse CSS quickly and efficiently. This parser is a suitable tool to aide in\n the design and implementation of runtime transformations.\n -  Graceful error recovery. Malformed CSS will be parsed by this\nparser as closely as possible to the way a browser would parse it.\n\n### Installing\n\nWith `node` and `npm` installed, run the following command:\n\n```sh\nnpm install shady-css-parser\n```\n\n### Building\n\nRun the following commands from the project root:\n\n```sh\nnpm run build\n```\n\nThis will create a `dist` directory containing distributable artifacts.\n\n### Usage\n\n#### Basic parsing\n\n```js\nimport * as shadyCss from 'shady-css-parser';\nconst css = 'body { color: red; }';\nconst parser = new shadyCss.Parser();\nconst ast = parser.parse(css);\n```\n\n#### Custom parsing\n\n```js\n/* Step 1: Inherit from NodeFactory */\nclass CustomNodeFactory extends shadyCss.NodeFactory {\n\n  /*\n   * Step 2: Implement a custom node factory method. Here we override the\n   *   default factory for Expression nodes\n   */\n  expression(text) {\n    if (/^darken\\(/.test(text)) {\n      return {\n        type: 'darkenExpression',\n        color: text.replace(/^darken\\(/, '').replace(/\\)$/, ''),\n      };\n    } else {\n      return super.expression.apply(this, arguments);\n    }\n  }\n}\n\nconst css = 'body { color: darken(red); }';\n/* Step 3: Instantiate a Parser with an instance of the specialized\n * CustomNodeFactory */\nconst parser = new shadyCss.Parser(new CustomNodeFactory());\nconst ast = parser.parse(css);\n```\n\n#### Basic stringification\n\n```js\nconst stringifier = new shadyCss.Stringifier();\nstringifier.stringify(ast);\n```\n\nNote: the built-in Parser and Stringifier discard most insignficiant whitespace\nfrom parsed CSS.\n\n#### Custom stringification\n\n```js\n/* Step 1: Inherit from Stringifier. */\nclass CustomStringifier extends shadyCss.Stringifier {\n\n  /**\n  * Step 2: Implement a stringification method named after the type of the node\n  * you are interested in stringifying. In this case, we are implementing\n  * stringification for the Darken Expression nodes we implemented parsing for\n  * above.\n  */\n  darkenExpression(darkenExpression) {\n    // For the sake of brevity, please assume that the darken function returns\n    // a darker version of the color parameter:\n    return darken(darkenExpression.color);\n  }\n}\n\n/* Step 3: Use the custom stringifer: */\nconst stringifier = new CustomStringifier();\nconst css = stringifier.stringify(ast);\n```\n\n### Example ASTs\n\n#### Custom property declaration\n\n```css\n.container {\n  --nog: blue;\n}\n```\n```js\n{\n  \"type\": 1, /* stylesheet */\n  \"rules\": [\n    {\n      \"type\": 4, /* ruleset */\n      \"selector\": \".container\",\n      \"rulelist\": {\n        \"type\": 7, /* rulelist */\n        \"rules\": [\n          {\n            \"type\": 6, /* declaration */\n            \"name\": \"--nog\",\n            \"value\": {\n              \"type\": 5, /* expression */\n              \"text\": \"blue\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n#### Mixin declaration\n\n```css\nruleset {\n  --mixin-name: {\n    /* rules */\n  };\n}\n```\n```js\n{\n  \"type\": 1, /* stylesheet */\n  \"rules\": [\n    {\n      \"type\": 4, /* ruleset */\n      \"selector\": \"ruleset\",\n      \"rulelist\": {\n        \"type\": 7, /* rulelist */\n        \"rules\": [\n          {\n            \"type\": 6, /* declaration */\n            \"name\": \"--mixin-name\",\n            \"value\": {\n              \"type\": 7, /* rulelist */\n              \"rules\": [\n                {\n                  \"type\": 2, /* comment */\n                  \"value\": \"\\/* rules *\\/\"\n                }\n              ]\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n#### Mixin application\n\n```css\n.title {\n  @apply(--my-toolbar-title-theme);\n}\n```\n```js\n{\n  \"type\": 1, /* stylesheet */\n  \"rules\": [\n    {\n      \"type\": 4, /* ruleset */\n      \"selector\": \".title\",\n      \"rulelist\": {\n        \"type\": 7, /* rulelist */\n        \"rules\": [\n          {\n            \"type\": 3, /* at rule */\n            \"name\": \"apply\",\n            \"parameters\": \"(--my-toolbar-title-theme)\",\n            \"rulelist\": null\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n#### Pathological comments\n\n```css\n/* unclosed\n@fiz {\n  --huk: {\n    /* buz */\n    baz: lur;\n  };\n}\n```\n```js\n{\n  \"type\": 1, /* stylesheet */\n  \"rules\": [\n    {\n      \"type\": 2, /* comment */\n      \"value\": \"\\/* unclosed\\n@fiz {\\n  --huk: {\\n    \\/* buz *\\/\"\n    },\n    {\n      \"type\": 6, /* declaration */\n      \"name\": \"baz\",\n      \"value\": {\n        \"type\": 5, /* expression */\n        \"text\": \"lur\"\n      }\n    },\n    {\n      \"type\": 8, /* discarded */\n      \"text\": \"};\\n\"\n    },\n    {\n      \"type\": 8, /* discarded */\n      \"text\": \"}\"\n    }\n  ]\n}\n```\n\n### Example stringification\n\n#### Basic ruleset\n\n```css\n/* before */\nbody {\n  margin: 0;\n  padding: 0px\n}\n```\n```css\n/* after */\nbody{margin:0;padding:0px;}\n```\n\n#### At rules\n\n```css\n/* before */\n@import url('foo.css');\n\n@font-face {\n  font-family: foo;\n}\n\n@charset 'foo';\n```\n```css\n/* after */\n@import url('foo.css');@font-face{font-family:foo;}@charset 'foo';\n```\n\n#### Custom properties\n\n```css\n/* before */\n:root {\n  --qux: vim;\n  --foo: {\n    bar: baz;\n  };\n}\n\n#target {\n  gak: var(--qux);\n  @apply(--foo);\n}\n```\n```css\n/* after */\n:root{--qux:vim;--foo:{bar:baz;};}#target{gak:var(--qux);@apply (--foo);}\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/PolymerLabs/shady-css-parser.git"
  },
  "scripts": {
    "build": "tsc",
    "format": "find src | grep '\\.js$\\|\\.ts$' | xargs clang-format --style=file -i",
    "lint": "tslint -p ./",
    "prepublishOnly": "npm run build",
    "test": "npm run build && mocha --require source-map-support/register dist/test/*.js",
    "test:sloppy": "tsc || echo '' && mocha --require source-map-support/register dist/test/*.js",
    "test:watch": "watchy -w src/ -- npm test --loglevel=silent"
  },
  "typings": "dist/shady-css.d.ts",
  "version": "0.1.0"
}

{
  "_args": [
    [
      "polymer-bundler@https://registry.npmjs.org/polymer-bundler/-/polymer-bundler-4.0.4.tgz",
      "/home/diogo/www/node_modules/polymer-cli"
    ]
  ],
  "_from": "polymer-bundler@https://registry.npmjs.org/polymer-bundler/-/polymer-bundler-4.0.4.tgz",
  "_id": "polymer-bundler@4.0.4",
  "_inCache": true,
  "_location": "/polymer-cli/polymer-bundler",
  "_phantomChildren": {},
  "_requested": {
    "name": "polymer-bundler",
    "raw": "polymer-bundler@https://registry.npmjs.org/polymer-bundler/-/polymer-bundler-4.0.4.tgz",
    "rawSpec": "https://registry.npmjs.org/polymer-bundler/-/polymer-bundler-4.0.4.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/polymer-bundler/-/polymer-bundler-4.0.4.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/polymer-cli",
    "/polymer-cli/polymer-build"
  ],
  "_resolved": "https://registry.npmjs.org/polymer-bundler/-/polymer-bundler-4.0.4.tgz",
  "_shasum": "ea2ece5739dc9022f85d950a2e205ee71449b8b2",
  "_shrinkwrap": null,
  "_spec": "polymer-bundler@https://registry.npmjs.org/polymer-bundler/-/polymer-bundler-4.0.4.tgz",
  "_where": "/home/diogo/www/node_modules/polymer-cli",
  "author": {
    "name": "The Polymer Project Authors"
  },
  "bin": {
    "polymer-bundler": "lib/bin/polymer-bundler.js"
  },
  "bugs": {
    "url": "https://github.com/Polymer/tools/issues"
  },
  "dependencies": {
    "@types/babel-generator": "^6.25.1",
    "@types/babel-traverse": "^6.25.3",
    "babel-generator": "^6.26.1",
    "babel-traverse": "^6.26.0",
    "babel-types": "^6.26.0",
    "clone": "^2.1.0",
    "command-line-args": "^5.0.2",
    "command-line-usage": "^5.0.5",
    "dom5": "^3.0.0",
    "espree": "^3.5.2",
    "magic-string": "^0.22.4",
    "mkdirp": "^0.5.1",
    "parse5": "^4.0.0",
    "polymer-analyzer": "^3.1.3",
    "rollup": "^0.64.1",
    "source-map": "^0.5.6",
    "vscode-uri": "^1.0.1"
  },
  "description": "Process Web Components into one output file",
  "devDependencies": {
    "@types/chokidar": "^1.7.5",
    "@types/clone": "^0.1.30",
    "@types/parse5": "^2.2.34",
    "@types/source-map": "=0.5.2",
    "eslint": "^2.8.0",
    "firebase": "^2.4.1",
    "rewire": "^2.5.2",
    "source-map-support": "^0.4.2",
    "tsc-then": "^1.1.0"
  },
  "directories": {
    "test": "test"
  },
  "files": [
    "LICENSE",
    "custom_typings/",
    "lib/"
  ],
  "homepage": "https://github.com/Polymer/tools/tree/master/packages/bundler",
  "keywords": [
    "polymer",
    "web components"
  ],
  "license": "BSD-3-Clause",
  "main": "lib/bundler.js",
  "name": "polymer-bundler",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/Polymer/polymer-bundler.svg?branch=master)](https://travis-ci.org/Polymer/polymer-bundler)\n[![NPM version](http://img.shields.io/npm/v/polymer-bundler.svg)](https://www.npmjs.com/package/polymer-bundler)\n\n# Polymer Bundler\n\npolymer-bundler is a library for packaging project assets for production to minimize network round-trips.\n\n\n## Relationship to Polymer CLI\n\nThe [Polymer CLI](https://github.com/Polymer/polymer-cli) uses [polymer-build](https://github.com/Polymer/polymer-build), which uses polymer-bundler, so you can think of the CLI's build pre-configured polymer-build pipeline including polymer-bundler. Setting this up for you makes the CLI easy to use, but as a command-line wrapper its customization options are more limited. polymer-bundler allows you to completely customize your bundle strategy.\n\n## Usage\n\nWeb pages that use multiple [HTML Imports](http://www.html5rocks.com/en/tutorials/webcomponents/imports/), external scripts, and stylesheets to load dependencies may end up making lots of network round-trips.  In many cases, this can lead to long initial load times and unnecessary bandwidth usage.  The polymer-bundler tool follows HTML Imports, external script and stylesheet references, inlining these external assets into \"bundles\", to be used in production.\n\nIn the future, technologies such as [HTTP/2](http://en.wikipedia.org/wiki/HTTP/2) and [Server Push](https://http2.github.io/faq/#whats-the-benefit-of-server-push) will likely obsolete the need for a tool like polymer-bundler for web deployment uses.\n\n\n## Installation\n\n`polymer-bundler` is available on npm. For maximium utility, `polymer-bundler` should be installed globally.\n\n    npm install -g polymer-bundler\n\nThis will install `polymer-bundler` to `/usr/local/bin/polymer-bundler` (you may need `sudo`\nfor this step).\n\n## Options\n- `-h`|`--help`: Print this message\n- `-v`|`--version`: Print version number\n- `-r`|`--root`: The root of the package/project being bundled.  Defaults to the current working folder.\n- `--exclude <path>`: Exclude a subpath from root. Use multiple times to exclude multiple paths. Tags (imports/scripts/etc) that reference an excluded path are left in-place, meaning the resources are not inlined. ex: `--exclude=elements/x-foo.html --exclude=elements/x-bar.html`\n- `--inline-scripts`: External scripts will only be inlined if this flag is provided.\n- `--inline-css`: External stylesheets will only be inlined if this flag is provided.\n- `--manifest-out <path>`: If specified, the bundle manifest will be written out to `<path>`.\n- `--redirect <prefix>|<path>`: Routes URLs with arbitrary `<prefix>`, possibly including a protocol, hostname, and/or path prefix to a `<path>` on local filesystem.  For example `--redirect \"myapp://|src\"` would route `myapp://main/home.html` to `./src/main/home.html`.  Multiple redirects may be specified; the earliest ones have the highest priority.\n- `--rewrite-urls-in-templates`: Fix URLs found inside `<style>` tags and certain element attributes (`action`, `assetpath`, `href`, `src`, and `style`) when inside `<template>` tags.  This may be necessary to bundle some Polymer 1.x projects with components that ues relative image URLs in their styles, as Polymer 1.x did not use the `assetpath` of `<dom-module>` to resolve URLs in styles like Polymer 2.x does.\n- `--shell`: Uses a bundling strategy which puts inlines shared dependencies into a specified html app \"shell\".\n- `--strip-comments`: Strips all HTML comments from the document which do not contain an `@license`, or start with `<!--#` or `<!--!`.\n- `--sourcemaps`: Honor (or create) sourcemaps for inline script tags.\n- `--out-file <path>`: If specified, output will be written to <path> instead of stdout.\n- `--out-dir <path>`: If specified, output will be written to <path>. Necessary if bundling multiple files.\n\n## Usage\nThe command\n\n    polymer-bundler target.html\n\nwill inline the HTML Imports of `target.html` and print the resulting HTML to standard output.\n\nThe command\n\n    polymer-bundler target.html --rewrite-urls-in-templates\n\nwill inline the HTML Imports of `target.html` and rewrite relative URLs encountered in style tags and element attributes to support Polymer 1.x projects which may rely on it.\n\nThe command\n\n    polymer-bundler target.html > build.html\n\nwill inline the HTML Imports of `target.html` and print the result to `build.html`.\n\nThe command\n\n    polymer-bundler -p \"path/to/target/\" /target.html\n\nwill inline the HTML Imports of `target.html`, treat `path/to/target/` as the webroot of target.html, and make all URLs absolute to the provided webroot.\n\nThe command\n\n    polymer-bundler --exclude \"path/to/target/subpath/\" --exclude \"path/to/target/subpath2/\" target.html\n\nwill inline the HTML Imports of `target.html` that are not in the directory `path/to/target/subpath` nor `path/to/target/subpath2`.\n\nThe command\n\n    polymer-bundler --inline-scripts target.html\n\nwill inline scripts in `target.html` as well as HTML Imports. Exclude flags will apply to both Imports and Scripts.\n\nThe command\n\n    polymer-bundler --inline-css target.html\n\nwill inline Polymerized stylesheets, `<link rel=\"import\" type=\"css\">`\n\nThe command\n\n    polymer-bundler --strip-comments target.html\n\nwill remove HTML comments, except for those containing `@license` or starting with `<!--#` or `<!--!`.  License comments will be deduplicated.\n\nThe command\n\n    polymer-bundler --redirect \"myapp://|src\" target.html\n\nwill route all URLs with prefix `myapp://` to the `src` folder.  So a URL like `myapp://main/index.html` would actually resolve to a file in `./src/main/index.html` relative to the package root.\n\n## Using polymer-bundler programmatically\n\npolymer-bundler as a library has two exported function.\n\n`polymer-bundler` constructor takes an object of options similar to the command line options:\n\n- `analyzer`: An instance of `polymer-analyzer` which provides analysis of and access to files to bundle.  Bundler will create its own instance if this is not given.\n- `excludes`: URLs to exclude from inlining. URLs may represent files or folders. HTML tags referencing excluded URLs are preserved.\n- `sourcemaps`: Honor (or create) sourcemaps for inline scripts\n- `inlineCss`: Will inline content of external stylesheets into the bundle html.  Defaults to `true`.\n- `inlineScripts`: Inline content of external scripts into the bundled html.  Defaults to `true`.\n- `rewriteUrlsInTemplates`: Fix URLs found inside `<style>` tags and certain element attributes (`action`, `assetpath`, `href`, `src`, and `style`) when inside `<template>` tags.  This may be necessary to bundle some Polymer 1.x projects with components that ues relative image URLs in their styles, as Polymer 1.x did not use the `assetpath` of `<dom-module>` to resolve URLs in styles like Polymer 2.x does.  Defaults to `false`.\n- `sourcemaps`: Honor (or create) sourcemaps for inline scripts.  Defaults to `false`.\n- `stripComments`: Remove all HTML comments, except for `@license`, which are merely de-duplicated, server-side include directives like `<!--# ... -->`, and other important comments of the form `<!--! ... -->`.  Defaults to `false`.\n- `strategy`: A function that takes an array of bundles and returns an array of bundles.  There are a strategy factory functions available in [bundle-manifest](https://github.com/Polymer/polymer-bundler/blob/master/src/bundle-manifest.ts).\n- `urlMapper`: A function that takes bundles and returns a Map of URLs to bundles.  This determines the location of generated bundles.  There are URL mapper factory functions available in [bundle-manifest](https://github.com/Polymer/polymer-bundler/blob/master/src/bundle-manifest.ts)\n\n`.generateManifest()` takes a collection of entrypoint URLs and promises a `BundleManifest` which describes all the bundles it will produce.\n\n`.bundle()` takes a `BundleManifest` and returns a `Promise` for a `BundleResult`, which contains a map of the generated bundle html files and an updated manifest containing information on what imports were inlined for each `Bundle`.\n\nA simple example:\n```js\nconst bundler = new require('polymer-bundler').Bundler();\nbundler.generateManifest(['my-app.html']).then((manifest) => {\n  bundler.bundle(manifest).then((result) => {\n    console.log('<!-- BUNDLED VERSION OF my-app.html: -->');\n    console.log(result.documents.get('my-app.html').content));\n  });\n});\n```\n\nAn example with a customized sharding strategy and output layout:\n```js\nconst {Analyzer, FsUrlLoader} = require('polymer-analyzer');\nconst analyzer = new Analyzer({\n  urlLoader: new FsUrlLoader(path.resolve('.'))\n});\n\nconst {Bundler,\n       generateSharedDepsMergeStrategy,\n       generateCountingSharedBundleUrlMapper} = require('polymer-bundler');\nconst bundler = new Bundler({\n  analyzer: analyzer,\n  excludes: [],\n  inlineScripts: true,\n  inlineCss: true,\n  rewriteUrlsInTemplates: false,\n  stripComments: true,\n  // Merge shared dependencies into a single bundle when\n  // they have at least three dependents.\n  strategy: generateSharedDepsMergeStrategy(3),\n  // Shared bundles will be named:\n  // `shared/bundle_1.html`, `shared/bundle_2.html`, etc...\n  urlMapper: generateCountingSharedBundleUrlMapper('shared/bundle_')\n});\n\n// Provide the strategy and the URL mapper to produce a\n// manifest using custom behavior.\nbundler.generateManifest(['item.html', 'cart.html']).then((manifest) => {\n  bundler.bundle(manifest).then((result) => {\n    // do stuff here with your BundleResult\n  });\n});\n```\n\n## Caveats\n\nIn order to inlining the contents of HTML Import documents into the bundle, `polymer-bundler` has to make a few compromises to preserve valid HTML structure, script execution and style rule order:\n\n1. Contents of all HTML Import documents will be moved to `<body>`\n\n1. Any scripts or styles, inline or linked, which occur after a `<link rel=\"import\">` node in `<head>` will be moved to `<body>` after the contents of the HTML Import.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/polymer/tools.git"
  },
  "scripts": {
    "build": "tsc && npm run lint",
    "format": "find src -name \"*.ts\" | xargs clang-format --style=file -i",
    "lint": "tslint -p .",
    "test": "npm run build && tslint -c tslint.json \"src/**/*.ts\" && mocha \"lib/test/**/*_test.js\"",
    "test:unit": "mocha \"lib/test/**/*_test.js\"",
    "test:watch": "tsc-then -- mocha \"lib/test/**/*_test.js\""
  },
  "typings": "lib/bundler.d.ts",
  "version": "4.0.4"
}

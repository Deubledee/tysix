{
  "_args": [
    [
      "command-line-commands@https://registry.npmjs.org/command-line-commands/-/command-line-commands-2.0.1.tgz",
      "/home/diogo/www/node_modules/polymer-cli"
    ]
  ],
  "_from": "command-line-commands@https://registry.npmjs.org/command-line-commands/-/command-line-commands-2.0.1.tgz",
  "_id": "command-line-commands@2.0.1",
  "_inCache": true,
  "_location": "/polymer-cli/command-line-commands",
  "_phantomChildren": {},
  "_requested": {
    "name": "command-line-commands",
    "raw": "command-line-commands@https://registry.npmjs.org/command-line-commands/-/command-line-commands-2.0.1.tgz",
    "rawSpec": "https://registry.npmjs.org/command-line-commands/-/command-line-commands-2.0.1.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/command-line-commands/-/command-line-commands-2.0.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/polymer-cli"
  ],
  "_resolved": "https://registry.npmjs.org/command-line-commands/-/command-line-commands-2.0.1.tgz",
  "_shasum": "c58aa13dc78c06038ed67077e57ad09a6f858f46",
  "_shrinkwrap": null,
  "_spec": "command-line-commands@https://registry.npmjs.org/command-line-commands/-/command-line-commands-2.0.1.tgz",
  "_where": "/home/diogo/www/node_modules/polymer-cli",
  "author": {
    "email": "75pound@gmail.com",
    "name": "Lloyd Brookes"
  },
  "bugs": {
    "url": "https://github.com/75lb/command-line-commands/issues"
  },
  "dependencies": {
    "array-back": "^2.0.0"
  },
  "description": "Add a git-like command interface to your app.",
  "devDependencies": {
    "command-line-args": "^4.0.6",
    "command-line-usage": "^4.0.0",
    "coveralls": "^2.13.1",
    "jsdoc-to-markdown": "^3.0.0",
    "minimist": "^1.2.0",
    "test-runner": "^0.4.0"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "files": [
    "lib"
  ],
  "homepage": "https://github.com/75lb/command-line-commands#readme",
  "keywords": [
    "args",
    "argument",
    "argv",
    "cli",
    "command",
    "commands",
    "line",
    "option",
    "parse",
    "parser",
    "parsing"
  ],
  "license": "MIT",
  "main": "lib/command-line-commands.js",
  "name": "command-line-commands",
  "optionalDependencies": {},
  "readme": "[![view on npm](http://img.shields.io/npm/v/command-line-commands.svg)](https://www.npmjs.org/package/command-line-commands)\n[![npm module downloads](http://img.shields.io/npm/dt/command-line-commands.svg)](https://www.npmjs.org/package/command-line-commands)\n[![Build Status](https://travis-ci.org/75lb/command-line-commands.svg?branch=master)](https://travis-ci.org/75lb/command-line-commands)\n[![Coverage Status](https://coveralls.io/repos/github/75lb/command-line-commands/badge.svg?branch=master)](https://coveralls.io/github/75lb/command-line-commands?branch=master)\n[![Dependency Status](https://david-dm.org/75lb/command-line-commands.svg)](https://david-dm.org/75lb/command-line-commands)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](https://github.com/feross/standard)\n\n# command-line-commands\nA lightweight module to help build a git-like command interface for your app.\n\nIts job is to extract the command (the first argument, unless it's an option), check it's valid and either return it or throw. From there, you can parse the remaining args using your preferred option parser (e.g. [command-line-args](https://github.com/75lb/command-line-args), [minimist](https://github.com/substack/minimist) etc.).\n\n## Synopsis\n\nCreate a list of valid commands (`null` represents \"no command\"). Supply it to `commandLineCommands()`, receiving back an object with two properties: `command` (the supplied command) and `argv` (the remainder of the command line args):\n```js\nconst commandLineCommands = require('command-line-commands')\n\nconst validCommands = [ null, 'clean', 'update', 'install' ]\nconst { command, argv } = commandLineCommands(validCommands)\n\n/* print the command and remaining command-line args */\nconsole.log('command: %s', command)\nconsole.log('argv:    %s', JSON.stringify(argv))\n```\n\nWe'll assume the above script is installed as `example`. Since the `validCommands` list includes `null`, running it without a command is valid:\n```\n$ example\ncommand: null\nargv:    []\n```\n\nRunning `example` with no command and one option:\n```\n$ example --verbose\ncommand: null\nargv:    [\"--verbose\"]\n```\n\nRunning `example` with both a command and an option:\n```\n$ example install --save something\ncommand: install\nargv:    [\"--save\",\"something\"]\n```\n\nRunning `example` without a valid command will cause `commandLineCommands()` to throw.\n\nFrom here, you can make a decision how to proceed based on the `command` and `argv` received. For example, if no command (`null`) was passed, you could parse the remaining `argv` for general options (in this case using [command-line-args](https://github.com/75lb/command-line-args)):\n\n```js\nif (command === null) {\n  const commandLineArgs = require('command-line-args')\n  const optionDefinitions = [\n    { name: 'version', type: Boolean }\n  ]\n\n  // pass in the `argv` returned by `commandLineCommands()`\n  const options = commandLineArgs(optionDefinitions, { argv })\n\n  if (options.version) {\n    console.log('version 1.0.1')\n  }\n}\n```\n\nThe same example, using [minimist](https://github.com/substack/minimist):\n\n```js\nif (command === null) {\n  const minimist = require('minimist')\n\n  // pass in the `argv` returned by `commandLineCommands()``\n  const options = minimist(argv)\n\n  if (options.version) {\n    console.log('version 1.0.1')\n  }\n}\n```\n\n## More examples\n\nBoth examples use [command-line-args](https://github.com/75lb/command-line-args) for option-parsing.\n\n- [Simple](https://github.com/75lb/command-line-commands/blob/master/example/simple.js): A basic app with a couple of commands.\n- [Advanced](https://github.com/75lb/command-line-commands/blob/master/example/advanced/git.js): A more complete example, implementing part of the git command interface.\n\n## Usage guides\n\nUsage guides can be generated by [command-line-usage](https://github.com/75lb/command-line-usage). Here is a simple example ([code](https://github.com/75lb/command-line-commands/blob/master/example/usage.js)):\n\n![usage](https://raw.githubusercontent.com/75lb/command-line-commands/master/example/screens/command-list.png)\n\n# API Reference\n**Example**  \n```js\nconst commandLineCommands = require('command-line-commands')\n```\n<a name=\"exp_module_command-line-commands--commandLineCommands\"></a>\n\n### commandLineCommands(commands, [argv]) ⇒ <code>Object</code> ⏏\nParses the `argv` value supplied (or `process.argv` by default), extracting and returning the `command` and remainder of `argv`. The command will be the first value in the `argv` array unless it is an option (e.g. `--help`).\n\n**Kind**: Exported function  \n**Throws**:\n\n- `INVALID_COMMAND` - user supplied a command not specified in `commands`.\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| commands | <code>string</code> &#124; <code>Array.&lt;string&gt;</code> | One or more command strings, one of which the user must supply. Include `null` to represent \"no command\" (effectively making a command optional). |\n| [argv] | <code>Array.&lt;string&gt;</code> | An argv array, defaults to the global `process.argv` if not supplied. |\n\n\n* * *\n\n&copy; 2015-17 Lloyd Brookes \\<75pound@gmail.com\\>. Documented by [jsdoc-to-markdown](https://github.com/jsdoc2md/jsdoc-to-markdown).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/75lb/command-line-commands.git"
  },
  "scripts": {
    "cover": "istanbul cover ./node_modules/.bin/test-runner -- --files test/*.js && cat coverage/lcov.info | ./node_modules/.bin/coveralls && rm -rf coverage; echo",
    "docs": "jsdoc2md -t jsdoc2md/README.hbs lib/*.js > README.md; echo",
    "test": "test-runner --files test/*.js"
  },
  "version": "2.0.1"
}

{
  "_args": [
    [
      "@polymer/esm-amd-loader@https://registry.npmjs.org/@polymer/esm-amd-loader/-/esm-amd-loader-1.0.3.tgz",
      "/home/diogo/www/node_modules/polymer-cli"
    ]
  ],
  "_from": "@polymer/esm-amd-loader@https://registry.npmjs.org/@polymer/esm-amd-loader/-/esm-amd-loader-1.0.3.tgz",
  "_id": "@polymer/esm-amd-loader@1.0.3",
  "_inCache": true,
  "_location": "/polymer-cli/@polymer/esm-amd-loader",
  "_phantomChildren": {},
  "_requested": {
    "name": "@polymer/esm-amd-loader",
    "raw": "@polymer/esm-amd-loader@https://registry.npmjs.org/@polymer/esm-amd-loader/-/esm-amd-loader-1.0.3.tgz",
    "rawSpec": "https://registry.npmjs.org/@polymer/esm-amd-loader/-/esm-amd-loader-1.0.3.tgz",
    "scope": "@polymer",
    "spec": "https://registry.npmjs.org/@polymer/esm-amd-loader/-/esm-amd-loader-1.0.3.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/polymer-cli/polymer-build"
  ],
  "_resolved": "https://registry.npmjs.org/@polymer/esm-amd-loader/-/esm-amd-loader-1.0.3.tgz",
  "_shasum": "231c47229da323f5a9ba89cf0696040021e66982",
  "_shrinkwrap": null,
  "_spec": "@polymer/esm-amd-loader@https://registry.npmjs.org/@polymer/esm-amd-loader/-/esm-amd-loader-1.0.3.tgz",
  "_where": "/home/diogo/www/node_modules/polymer-cli",
  "author": {
    "name": "The Polymer Project Authors"
  },
  "bugs": {
    "url": "https://github.com/Polymer/tools/issues"
  },
  "dependencies": {},
  "description": "Minimal AMD-style loader for replicating ES module behavior.",
  "devDependencies": {
    "babel-minify": "^0.4.0"
  },
  "homepage": "https://github.com/Polymer/tools/tree/master/packages/esm-amd-loader",
  "license": "BSD-3-Clause",
  "main": "lib/esm-amd-loader.min.js",
  "name": "@polymer/esm-amd-loader",
  "optionalDependencies": {},
  "readme": "[![NPM version](http://img.shields.io/npm/v/@polymer/esm-amd-loader.svg)](https://www.npmjs.com/package/@polymer/esm-amd-loader)\n\n# @polymer/esm-amd-loader\n\nA JavaScript library which loads AMD-style modules in the browser in 1.4 KB.\n\n## Contents\n\n- [Installation](#installation)\n- [Example usage](#example-usage)\n- [window.define](#windowdefine)\n- [Special dependencies](#special-dependencies)\n- [Differences from AMD/RequireJS](#differences-from-amdrequirejs)\n\n## Installation\n\nIf you are using [Polymer CLI][1] 1.7.0 or above, then no separate installation\nis needed. Polymer CLI will automatically transform your project to AMD modules\nusing the [Babel AMD transform plugin][2], and inject this loader into your HTML\ndocument.\n\nFor other use cases, this loader can be installed directly from NPM:\n\n```bash\n$ npm install --save @polymer/esm-amd-loader\n```\n\n## Example usage\n\nThis loader is primarily intended to be used as the browser runtime component of\nan automatic transformation of a project from ES modules to AMD modules, as\nperformed by tools like the [Babel AMD transform plugin][2] or [TypeScript AMD\ngeneration][3]. It is not expected that users would typically author code\ndirectly for this API.\n\n#### index.html\n```html\n<script src=\"./node_modules/@polymer/esm-amd-loader/lib/esm-amd-loader.min.js\"></script>\n\n<script>\n  define(['./foo.js'], function(foo) {\n    console.log('imported', foo.stuff, 'from foo.js');\n  });\n</script>\n```\n\n#### foo.js\n```js\ndefine(['exports', 'require', 'meta'], function(exports, require, meta) {\n  exports.stuff = 'neat stuff';\n\n  require(['../bar.js'],\n    function(bar) {\n      console.log(meta.url, 'dynamically loaded bar.js:', bar);\n    },\n    function(error) {\n      console.log(meta.url, 'failed to dynamically load bar.js:', error);\n    });\n});\n```\n\n## window.define\n\n```ts\nwindow.define = function(\n    dependencies: string[],\n    moduleBody?: (...args: Array<{}>) => void\n```\n\n### `dependencies`\nAn array of module paths, relative or absolute, which are dependencies of this\nmodule. Relative paths are resolved relative to the location of this module.\nCan also be one of the special dependencies listed below.\n\nDependencies are run in the same deterministic order as they would if they\nwere ES modules.\n\n### `moduleBody`\nA function which is invoked when all dependencies have resolved. The `exports`\nof each dependency is passed as an argument to this function, in the same order\nthat they were specified in the `dependencies` array.\n\nIf any dependencies do not load (e.g. `404`), or if their module bodies throw an error nothing later in the dependency graph will execute, and an `Error` will be thrown up to the `window` error event.\n\n## Special dependencies\n\n### `\"exports\"`\n\nThe exports object for this module. If another module depends on this module,\nthis is the object that will be received.\n\n### `\"require\"`\n\n```ts\nfunction require(\n    dependencies: string[],\n    onResolve?: (...args: Array<{}>),\n    onError?: (error: Error)) => void\n```\n\nA function which will load the given dependencies, with relative paths resolved\nrelative to the current module. If successful, `onResolve` is called with the\nresolved dependencies. If a dependency fails to load, `onError` is called with\nthe error from the first dependency which failed.\n\n### `\"meta\"`\n\nA `{url: string}` object, where `url` is the fully qualified URL of this module.\nCorresponds to an ES module's [`import.meta`][5].\n\n## Differences from AMD/RequireJS\n\n- Minified and compressed size is 1.4 KB, vs 6.6 KB for RequireJS.\n\n- Only supports specifying dependencies as paths, and does not support\n  explicitly naming modules.\n\n- Does not include a global `require` function. Instead,  modules created with\n  `define` always execute immediately. RequireJS executes `require` calls\n  immediately, but only executes `define` modules if they are a transitive\n  dependency of a `require` call, or if they are named by the `data-name`\n  bootstrap attribute.\n\n- Modules always resolve to an `exports` object, even if the module did not\n  request it or assign any properties to it. RequireJS modules will resolve to\n  `undefined` if the module did not request its `exports` object.\n\n- AMD does not specify the `meta` object. It does specify a similar object\n  called `module`, which can contain `id` and `uri`. RequireJS provides `module`\n  and sets `uri` to a path relative to the HTML document's base URL.\n\n- RequireJS contains a [bug][4] whereby relative path resolution for modules\n  above the HTML document base URL can result in duplicate requests for the same\n  module.\n\n- Module execution order happens according to the ES spec, including support for\n  cyclical dependencies.\n\n- Top level define calls are also ordered, similar to the way that multiple\n  `<script type=\"module\">` tags in an HTML document are.\n\n[1]: https://github.com/Polymer/tools/tree/master/packages/cli\n[2]: https://babeljs.io/docs/plugins/transform-es2015-modules-amd/\n[3]: https://www.typescriptlang.org/docs/handbook/modules.html#code-generation-for-modules\n[4]: https://github.com/requirejs/requirejs/issues/1732\n[5]: https://github.com/tc39/proposal-import-meta/blob/master/HTML%20Integration.md\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/polymer/tools.git"
  },
  "scripts": {
    "build": "npm run clean && tsc && npm run minify",
    "clean": "rm -rf lib/",
    "format": "find src -name \"*.ts\" | xargs clang-format --style=file -i",
    "get-size": "npm run build && cat lib/esm-amd-loader.min.js | gzip -9 > esm-amd-loader.min.js.gz && ls -a -l -h esm-amd-loader.min.js.gz && rm esm-amd-loader.min.js.gz",
    "lint": "tslint --project . --format stylish",
    "minify": "babel-minify lib/esm-amd-loader.js --outFile=lib/esm-amd-loader.min.js",
    "prepack": "npm run build",
    "prepublishOnly": "npm test",
    "test": "npm run lint && npm run build && cd test/ && npm run test",
    "test:integration": "cd test/ && npm run test:wct"
  },
  "types": "lib/esm-amd-loader.d.ts",
  "version": "1.0.3"
}

{
  "_args": [
    [
      "emitter-component@https://registry.npmjs.org/emitter-component/-/emitter-component-1.1.1.tgz",
      "/home/diogo/www/node_modules/polymer-cli"
    ]
  ],
  "_from": "emitter-component@https://registry.npmjs.org/emitter-component/-/emitter-component-1.1.1.tgz",
  "_id": "emitter-component@1.1.1",
  "_inCache": true,
  "_location": "/polymer-cli/emitter-component",
  "_phantomChildren": {},
  "_requested": {
    "name": "emitter-component",
    "raw": "emitter-component@https://registry.npmjs.org/emitter-component/-/emitter-component-1.1.1.tgz",
    "rawSpec": "https://registry.npmjs.org/emitter-component/-/emitter-component-1.1.1.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/emitter-component/-/emitter-component-1.1.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/polymer-cli/stream"
  ],
  "_resolved": "https://registry.npmjs.org/emitter-component/-/emitter-component-1.1.1.tgz",
  "_shasum": "065e2dbed6959bf470679edabeaf7981d1003ab6",
  "_shrinkwrap": null,
  "_spec": "emitter-component@https://registry.npmjs.org/emitter-component/-/emitter-component-1.1.1.tgz",
  "_where": "/home/diogo/www/node_modules/polymer-cli",
  "bugs": {
    "url": "https://github.com/component/emitter/issues"
  },
  "component": {
    "scripts": {
      "emitter": "index.js"
    }
  },
  "dependencies": {},
  "description": "Event emitter",
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "homepage": "https://github.com/component/emitter#readme",
  "name": "emitter-component",
  "optionalDependencies": {},
  "readme": "# Emitter [![Build Status](https://travis-ci.org/component/emitter.png)](https://travis-ci.org/component/emitter)\n\n  Event emitter component.\n\n## Installation\n\n```\n$ component install component/emitter\n```\n\n## API\n\n### Emitter(obj)\n\n  The `Emitter` may also be used as a mixin. For example\n  a \"plain\" object may become an emitter, or you may\n  extend an existing prototype.\n\n  As an `Emitter` instance:\n\n```js\nvar Emitter = require('emitter');\nvar emitter = new Emitter;\nemitter.emit('something');\n```\n\n  As a mixin:\n\n```js\nvar Emitter = require('emitter');\nvar user = { name: 'tobi' };\nEmitter(user);\n\nuser.emit('im a user');\n```\n\n  As a prototype mixin:\n\n```js\nvar Emitter = require('emitter');\nEmitter(User.prototype);\n```\n\n### Emitter#on(event, fn)\n\n  Register an `event` handler `fn`.\n\n### Emitter#once(event, fn)\n\n  Register a single-shot `event` handler `fn`,\n  removed immediately after it is invoked the\n  first time.\n\n### Emitter#off(event, fn)\n\n  * Pass `event` and `fn` to remove a listener.\n  * Pass `event` to remove all listeners on that event.\n  * Pass nothing to remove all listeners on all events.\n\n### Emitter#emit(event, ...)\n\n  Emit an `event` with variable option args.\n\n### Emitter#listeners(event)\n\n  Return an array of callbacks, or an empty array.\n\n### Emitter#hasListeners(event)\n\n  Check if this emitter has `event` handlers.\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/component/emitter.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "1.1.1"
}

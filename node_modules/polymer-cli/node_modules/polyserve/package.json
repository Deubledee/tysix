{
  "_args": [
    [
      "polyserve@https://registry.npmjs.org/polyserve/-/polyserve-0.27.13.tgz",
      "/home/diogo/www/node_modules/polymer-cli"
    ]
  ],
  "_from": "polyserve@https://registry.npmjs.org/polyserve/-/polyserve-0.27.13.tgz",
  "_id": "polyserve@0.27.13",
  "_inCache": true,
  "_location": "/polymer-cli/polyserve",
  "_phantomChildren": {
    "@types/bluebird": "3.5.24",
    "@types/node": "10.12.0"
  },
  "_requested": {
    "name": "polyserve",
    "raw": "polyserve@https://registry.npmjs.org/polyserve/-/polyserve-0.27.13.tgz",
    "rawSpec": "https://registry.npmjs.org/polyserve/-/polyserve-0.27.13.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/polyserve/-/polyserve-0.27.13.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/polymer-cli",
    "/polymer-cli/web-component-tester"
  ],
  "_resolved": "https://registry.npmjs.org/polyserve/-/polyserve-0.27.13.tgz",
  "_shasum": "00795cfd418f618f6cb662a92b0acdaffc0c4819",
  "_shrinkwrap": null,
  "_spec": "polyserve@https://registry.npmjs.org/polyserve/-/polyserve-0.27.13.tgz",
  "_where": "/home/diogo/www/node_modules/polymer-cli",
  "author": {
    "name": "The Polymer Project Authors"
  },
  "bin": {
    "polyserve": "bin/polyserve"
  },
  "bugs": {
    "url": "https://github.com/Polymer/tools/issues"
  },
  "dependencies": {
    "@types/compression": "^0.0.33",
    "@types/content-type": "^1.1.0",
    "@types/escape-html": "0.0.20",
    "@types/express": "^4.0.36",
    "@types/mime": "^2.0.0",
    "@types/mz": "0.0.29",
    "@types/opn": "^3.0.28",
    "@types/parse5": "^2.2.34",
    "@types/pem": "^1.8.1",
    "@types/resolve": "0.0.6",
    "@types/serve-static": "^1.7.31",
    "@types/spdy": "^3.4.1",
    "bower-config": "^1.4.1",
    "browser-capabilities": "^1.0.0",
    "command-line-args": "^5.0.2",
    "command-line-usage": "^5.0.5",
    "compression": "^1.6.2",
    "content-type": "^1.0.2",
    "escape-html": "^1.0.3",
    "express": "^4.8.5",
    "find-port": "^1.0.1",
    "http-proxy-middleware": "^0.17.2",
    "lru-cache": "^4.0.2",
    "mime": "^2.3.1",
    "mz": "^2.4.0",
    "opn": "^3.0.2",
    "pem": "^1.8.3",
    "polymer-build": "^3.1.0",
    "polymer-project-config": "^4.0.0",
    "requirejs": "^2.3.4",
    "resolve": "^1.5.0",
    "send": "^0.16.2",
    "spdy": "^3.3.3"
  },
  "description": "A simple dev server for bower components",
  "devDependencies": {
    "@types/lru-cache": "^2.5.32",
    "@types/sinon": "^5.0.0",
    "@types/supertest": "^2.0.1",
    "@types/tmp": "0.0.31",
    "intercept-stdout": "^0.1.2",
    "rimraf": "^2.6.2",
    "sinon": "^5.0.7",
    "source-map-support": "^0.4.6",
    "supertest": "^3.0.0",
    "tmp": "0.0.28",
    "tsc-then": "^1.1.0"
  },
  "homepage": "https://github.com/Polymer/tools/tree/master/packages/polyserve",
  "keywords": [
    "polymer",
    "polyserve"
  ],
  "license": "BSD-3-Clause",
  "main": "./lib/polyserve.js",
  "name": "polyserve",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/Polymer/polyserve.svg?branch=master)](https://travis-ci.org/Polymer/polyserve)\n[![NPM version](http://img.shields.io/npm/v/polyserve.svg)](https://www.npmjs.com/package/polyserve)\n\n# polyserve\n\nA simple development server for web projects.\n\n`polyserve` serves project files from a URL root that allows relative URLs\nthat reach out of the project, like those starting with `../`, to work. This is\nnecessary for referencing other packages by path when stored as a flat directory\nsuch as how Bower works.\n\nThe local package is served at the URL `/components/{bower-name}/`, with files\nserved from the current directory. Other packages are served at\n`/components/{packageName}` with files served from their directory under\n`./bower_components/`.\n\n## Installation\n\n    $ npm install polyserve -g\n\n## Usage\n\n### Run `polyserve`\n\n    $ cd my-element/\n    $ polyserve\n\n### Browse files\n\nNavigate to `localhost:8080/components/my-element/demo.html`\n\n### Options\n\n * `--version`: Print version info.                                                           \n * `--root` _string_: The root directory of your project. Defaults to the current working directory.                                                                    \n * `--compile` _string_: Compiler options. Valid values are \"auto\", \"always\" and \"never\". \"auto\" compiles JavaScript to ES5 for browsers that don't fully support ES6.         \n * `--module-resolution` _string_: Algorithm to use for resolving module specifiers in import and export statements when rewriting them to be web-compatible. Valid values are \"none\" and \"node\". \"none\" disables module specifier rewriting. \"node\" uses Node.js resolution to find modules.\n * `--compile-cache` _number_: Maximum size in bytes (actually, UTF-8 characters) of the cache used to store results for JavaScript compilation. Cache size includes the uncompiled and compiled file content lengths. Defaults to 52428800 (50MB).\n * `-p`, `--port` _number_: The port to serve from. Serve will choose an open port for you by default.\n * `-H`, `--hostname` _string_: The hostname to serve from. Defaults to localhost.          \n * `-c`, `--component-dir` _string_: The component directory to use. Defaults to reading from the Bower config (usually bower_components/).\n * `-u`, `--component-url` _string_: The component url to use. Defaults to reading from the Bower config (usually bower_components/).\n * `-n`, `--package-name` _string_: The package name to use for the root directory. Defaults to reading from bower.json.\n * `--npm`: Sets npm mode: component directory is \"node_modules\" and the package name is read from package.json\n * `-o`, `--open`: The page to open in the default browser on startup.\n * `-b`, `--browser` _string[]_: The browser(s) to open with when using the --open option. Defaults to your default web browser.\n * `--open-path` _string_: The URL path to open when using the --open option. Defaults to \"index.html\".\n * `-P`, `--protocol` _string_: The server protocol to use {h2, https/1.1, http/1.1}. Defaults to \"http/1.1\".\n * `--key` _string_: Path to TLS certificate private key file for https. Defaults to \"key.pem\".\n * `--cert` _string_: Path to TLS certificate file for https. Defaults to \"cert.pem\".\n * `--manifest` _string_: Path to HTTP/2 Push Manifest.    \n * `--proxy-path` _string_: Top-level path that should be redirected to the proxy-target. E.g. `api/v1` when you want to redirect all requests of `https://localhost/api/v1/`.\n * `--proxy-target` _string_: Host URL to proxy to, for example `https://myredirect:8080/foo`.\n * `--help`: Shows this help message\n\n## Compiling from Source\n\n    $ npm install\n    $ npm run build\n\nYou can compile and run polyserve from source by cloning the repo from Github and then running `npm run build`. Make sure you have already run `npm install` before building.\n\n### Run Tests\n\n    $ npm test\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/polymer/tools.git"
  },
  "scripts": {
    "build": "npm run clean && tsc && npm run lint",
    "clean": "rimraf lib",
    "format": "find src test -name \"*.ts\" | xargs clang-format --style=file -i",
    "lint": "tslint -p .",
    "start": "./bin/polyserve",
    "test": "npm run build && mocha \"lib/test/**/*_test.js\" && tslint \"src/**/*.ts\"",
    "test:unit": "mocha \"lib/test/**/*_test.js\"",
    "test:watch": "tsc-then -- mocha \"lib/test/**/*_test.js\"",
    "update-goldens": "tsc && UPDATE_POLYSERVE_GOLDENS=true mocha lib/test/compile-middleware_test.js || echo ''"
  },
  "typings": "./lib/polyserve.d.ts",
  "version": "0.27.13"
}

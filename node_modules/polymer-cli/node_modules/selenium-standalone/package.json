{
  "_args": [
    [
      "selenium-standalone@https://registry.npmjs.org/selenium-standalone/-/selenium-standalone-6.15.3.tgz",
      "/home/diogo/www/node_modules/polymer-cli"
    ]
  ],
  "_from": "selenium-standalone@https://registry.npmjs.org/selenium-standalone/-/selenium-standalone-6.15.3.tgz",
  "_id": "selenium-standalone@6.15.3",
  "_inCache": true,
  "_location": "/polymer-cli/selenium-standalone",
  "_phantomChildren": {
    "bl": "1.2.2",
    "buffer-alloc": "1.2.0",
    "end-of-stream": "1.4.1",
    "fs-constants": "1.0.0",
    "lodash": "4.17.11",
    "nice-try": "1.0.5",
    "path-key": "2.0.1",
    "readable-stream": "2.3.6",
    "semver": "5.6.0",
    "shebang-command": "1.2.0",
    "to-buffer": "1.1.1",
    "which": "1.3.1",
    "xtend": "4.0.1"
  },
  "_requested": {
    "name": "selenium-standalone",
    "raw": "selenium-standalone@https://registry.npmjs.org/selenium-standalone/-/selenium-standalone-6.15.3.tgz",
    "rawSpec": "https://registry.npmjs.org/selenium-standalone/-/selenium-standalone-6.15.3.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/selenium-standalone/-/selenium-standalone-6.15.3.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/polymer-cli/wct-local"
  ],
  "_resolved": "https://registry.npmjs.org/selenium-standalone/-/selenium-standalone-6.15.3.tgz",
  "_shasum": "c89e676f6e5acf54a212bcea985d02880564b008",
  "_shrinkwrap": null,
  "_spec": "selenium-standalone@https://registry.npmjs.org/selenium-standalone/-/selenium-standalone-6.15.3.tgz",
  "_where": "/home/diogo/www/node_modules/polymer-cli",
  "author": {
    "email": "vincent@zeroload.net",
    "name": "Vincent Voyer"
  },
  "bin": {
    "selenium-standalone": "./bin/selenium-standalone",
    "start-selenium": "./bin/start-selenium"
  },
  "bugs": {
    "url": "https://github.com/vvo/selenium-standalone/issues"
  },
  "contributors": [
    {
      "name": "Vincent Voyer",
      "email": "vincent@zeroload.net"
    },
    {
      "name": "Josh Chisholm",
      "email": "joshuachisholm@gmail.com"
    }
  ],
  "dependencies": {
    "async": "^2.1.4",
    "commander": "^2.9.0",
    "cross-spawn": "^6.0.0",
    "debug": "^4.0.0",
    "lodash": "^4.17.4",
    "minimist": "^1.2.0",
    "mkdirp": "^0.5.1",
    "progress": "2.0.0",
    "request": "2.88.0",
    "tar-stream": "1.6.1",
    "urijs": "^1.18.4",
    "which": "^1.2.12",
    "yauzl": "^2.5.0"
  },
  "description": "installs a `selenium-standalone` command line to install and start a standalone selenium server",
  "devDependencies": {
    "chai": "4.1.2",
    "doctoc": "1.3.1",
    "json": "9.0.6",
    "mocha": "5.2.0",
    "mversion": "1.12.0"
  },
  "homepage": "https://github.com/vvo/selenium-standalone",
  "license": "MIT",
  "main": "index.js",
  "name": "selenium-standalone",
  "optionalDependencies": {},
  "readme": "<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n**Table of Contents**  *generated with [DocToc](https://github.com/thlorenz/doctoc)*\n\n- [selenium-standalone](#selenium-standalone)\n  - [Install & Run](#install--run)\n  - [Command line interface](#command-line-interface)\n  - [Application Programming Interface (API)](#application-programming-interface-api)\n    - [Sample configuration object](#sample-configuration-object)\n    - [Example](#example)\n    - [selenium.install([opts,] cb)](#seleniuminstallopts-cb)\n    - [selenium.start([opts,] cb)](#seleniumstartopts-cb)\n      - [`Error: Another Selenium process is already running`](#error-another-selenium-process-is-already-running)\n  - [Available browsers](#available-browsers)\n  - [Tips](#tips)\n    - [Start Selenium whenever your (ubuntu) machine starts!](#start-selenium-whenever-your-ubuntu-machine-starts)\n    - [Ensure you have the minimum required Java version](#ensure-you-have-the-minimum-required-java-version)\n    - [Running headlessly](#running-headlessly)\n    - [Logging](#logging)\n      - [Selenium Process](#selenium-process)\n      - [Debug Logs for Selenium Standalone Process](#debug-logs-for-selenium-standalone-process)\n    - [Examples of combining with other tools](#examples-of-combining-with-other-tools)\n    - [Release](#release)\n    - [Release Docker](#release-docker)\n    - [`Error: unable to get local issuer certificate`](#error-unable-to-get-local-issuer-certificate)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n# selenium-standalone \n[![Build Status](https://travis-ci.org/vvo/selenium-standalone.svg?branch=master)](https://travis-ci.org/vvo/selenium-standalone) \n[![dependencies Status](https://david-dm.org/vvo/selenium-standalone/status.svg)](https://david-dm.org/vvo/selenium-standalone)\n[![devDependencies Status](https://david-dm.org/vvo/selenium-standalone/dev-status.svg)](https://david-dm.org/vvo/selenium-standalone?type=dev)\n\n> A node based CLI library for launching [Selenium](http://www.seleniumhq.org/download/) with WebDrivers support.\n\nSupported WebDrivers:\n\n * [ChromeDriver](https://github.com/SeleniumHQ/selenium/wiki/ChromeDriver)\n * [FirefoxDriver](https://github.com/SeleniumHQ/selenium/wiki/FirefoxDriver)\n * [IEDriver](https://github.com/SeleniumHQ/selenium/wiki/InternetExplorerDriver)\n * [Edge WebDriver](https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/#downloads)\n\n\n## Install & Run\n\n*As global npm package*\n\n```shell\nnpm install selenium-standalone@latest -g\nselenium-standalone install && selenium-standalone start\n```\n\n*As a local npm package*\n\n```shell\nnpm install selenium-standalone --save-dev\n./node_modules/.bin/selenium-standalone install && ./node_modules/.bin/selenium-standalone start\n```\n\n*As a Docker service*\n\n```shell\ndocker run -it -p 4444:4444 vvoyer/selenium-standalone\n```\n\n\n![screencast](screencast.gif)\n\n## Command line interface\n\n```shell\n# simple, use defaults and latest selenium\nselenium-standalone install\nselenium-standalone start\n\n# install defaults, but silently\nselenium-standalone install --silent\n\n# specify selenium args, everything after -- is for selenium\nselenium-standalone start -- -debug\n\n# choose selenium version\nselenium-standalone install --version=2.45.0 --baseURL=https://selenium-release.storage.googleapis.com\n\n# choose chrome driver version\nselenium-standalone install --drivers.chrome.version=2.15 --drivers.chrome.baseURL=https://chromedriver.storage.googleapis.com\n\n# choose ie driver architecture\nselenium-standalone start --drivers.ie.arch=ia32 --drivers.ie.baseURL=https://selenium-release.storage.googleapis.com\n\n# install a single driver within the default list (chrome, ie, edge, firefox)\nselenium-standalone install --singleDriverInstall=chrome\n\n# specify hub and nodes to setup your own selenium grid\nselenium-standalone start -- -role hub\nselenium-standalone start -- -role node -hub http://localhost:4444/grid/register\nselenium-standalone start -- -role node -hub http://localhost:4444/grid/register -port 5556\n\n# If you have a complex configuration with numerous options or if you want to keep a clear configuration changes history,\n# you can specify the options in a configuration file :\nselenium-standalone install --config=/path/to/config.json\nselenium-standalone start --config=./config/seleniumConfig.js\n\n```\n\nConfig file can be a JSON file or a [module file](https://nodejs.org/api/modules.html#modules_file_modules) that exports options as an object:\n\n```js\nmodule.exports = {\n  drivers: {\n    chrome: {\n      version: '2.39',\n      arch: process.arch,\n      baseURL: 'https://chromedriver.storage.googleapis.com'\n    },\n  },\n}\n```\n\n## Application Programming Interface (API)\n\n### Sample configuration object\n\nHere you can find an up-to-date example of the configuration object:\n[lib/default-config.js](lib/default-config.js)\n\n### Example\n\n```js\nvar selenium = require('selenium-standalone');\n\nselenium.install({\n  // check for more recent versions of selenium here:\n  // https://selenium-release.storage.googleapis.com/index.html\n  version: '3.8.1',\n  baseURL: 'https://selenium-release.storage.googleapis.com',\n  drivers: {\n    chrome: {\n      // check for more recent versions of chrome driver here:\n      // https://chromedriver.storage.googleapis.com/index.html\n      version: '2.39',\n      arch: process.arch,\n      baseURL: 'https://chromedriver.storage.googleapis.com'\n    },\n    ie: {\n      // check for more recent versions of internet explorer driver here:\n      // https://selenium-release.storage.googleapis.com/index.html\n      version: '3.9.0',\n      arch: process.arch,\n      baseURL: 'https://selenium-release.storage.googleapis.com'\n    }\n  },\n  proxy: 'http://localproxy.com', // see https://github.com/request/request#proxies\n  requestOpts: { // see https://github.com/request/request#requestoptions-callback\n    timeout: 10000\n  },\n  logger: function(message) {\n\n  },\n  progressCb: function(totalLength, progressLength, chunkLength) {\n\n  }\n}, cb);\n```\n\n### selenium.install([opts,] cb)\n\n`opts.version` [selenium version](https://selenium-release.storage.googleapis.com/index.html) to install.\n\n`opts.drivers` map of drivers to download and install along with selenium standalone server.\n\nThe current defaults can be found in [lib/default-config.js](lib/default-config.js).\n\n`arch` is either `ia32` or `x64`, it's here because you might want to switch to a particular\narch [sometimes](https://code.google.com/p/selenium/issues/detail?id=5116#c9).\n\n`baseURL` is used to find the server having the selenium or drivers files.\n\n`opts.basePath` sets the base directory used to store the selenium standalone `.jar` and drivers. Defaults to current working directory + .selenium/\n\n`opts.progressCb(totalLength, progressLength, chunkLength)` will be called if provided with raw bytes length numbers about the current download process. It is used by the command line to show a progress bar.\n\n`opts.logger` will be called if provided with some debugging information about the installation process.\n\n`opts.requestOpts` can be any valid [`request` options object](https://github.com/request/request#requestoptions-callback). You can use this for example to set a timeout.\n\n`cb(err)` called when install finished or errored.\n\n### selenium.start([opts,] cb)\n\n`opts.version` [selenium version](https://selenium-release.storage.googleapis.com/index.html) to install.\n\n`opts.drivers` map of drivers to run along with selenium standalone server, same\nas `selenium.install`.\n\n`opts.basePath` sets the base directory used to load the selenium standalone `.jar` and drivers, same as `selenium.install`.\n\nBy default all drivers are loaded, you only control and change the versions or archs.\n\n`opts.spawnOptions` [spawn options](https://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options) for the selenium server. Defaults to `undefined`\n\n`opts.javaArgs` array of arguments for the JVM, included between `java` and `-jar` in the command line invocation. Use this option to set properties like `-Xmx=512M` or `-Djava.util.logging.config.file=logging.properties`, for instance. Defaults to `[]`.\n\n`opts.seleniumArgs` array of arguments for the selenium server, passed directly to [child_process.spawn](https://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options). Defaults to `[]`.\n\n`opts.spawnCb` will be called if provided as soon as the selenium child process was spawned. It may be interesting if you want to do some more debug.\n\n`opts.javaPath` set the javaPath manually, otherwise we use `[which](https://github.com/isaacs/node-which).sync('java')`.\n\n`opts.requestOpts` can be any valid [`request` options object](https://github.com/request/request#requestoptions-callback). You can use this for example to set a timeout.\n\n`cb(err, child)` called when the server is running and listening, child is the [ChildProcess](https://nodejs.org/api/child_process.html#child_process_class_childprocess) instance created.\n\nSo you can `child.kill()` when you are done.\n\n#### `Error: Another Selenium process is already running`\n\nIf you're getting this error, it means that you didn't shut down the server successfully the last time you started it, so it's still running in the background. You can kill it by running:\n\n```shell\npkill -f selenium-standalone\n```\n\n## Available browsers\n\nBy default, google chrome, firefox and phantomjs are available\nwhen installed on the host system.\n\n## Tips\n\n### Start Selenium whenever your (ubuntu) machine starts!\n\nAfter installing selenium-standalone globally, execute the following commands to run selenium-standalone when your machine starts!\n\n```shell\nln -s /usr/local/bin/selenium-standalone /etc/init.d/\nupdate-rc.d selenium-standalone defaults\n```\n\nFor more information: https://stackoverflow.com/questions/3666794/selenium-server-on-startup/30392437#30392437\n\n### Ensure you have the minimum required Java version\n\nWith the release of Selenium 3+, the minimum required version of Java is 8, as [7 has ceased public updates](https://java.com/en/download/faq/java_7.xml).\n\nIf an older selenium version is needed, you can check the requirements on the [official Selenium changelog](https://raw.githubusercontent.com/SeleniumHQ/selenium/master/java/CHANGELOG).\n\nHere is a reference sheet for the more recent Selenium version:\n\n| Selenium version | Minimum Java Required |\n|   ---   |   ---   |\n| 3.0.0+  | Java 8  |\n| 2.47.0+ | Java 7  |\n| 2.22.0+ | Java 6  |\n\n### Running headlessly\n\nOn linux,\n\nTo run headlessly, you can use [xvfb](https://en.wikipedia.org/wiki/Xvfb):\n\n```shell\nxvfb-run --server-args=\"-screen 0, 1366x768x24\" selenium-standalone start\n```\n\n### Logging\n\n#### Selenium Process\n\nBy default, Selenium sends [logging messages to stderr](https://code.google.com/p/selenium/issues/detail?id=7957).\n\nThe selenium-standalone cli tool (`selenium-standalone start`) will output the logging messages to your `process.stderr`. So you do see them in the console.\n\nIf you are using the programmatic API, you can retrieve the `stderr` messages by doing this:\n\n```js\nvar selenium = require('selenium-standalone');\nselenium.start(function(err, child) {\n  child.stderr.on('data', function(data){\n    console.log(data.toString());\n  });\n});\n```\n\nYou can also forward the `stderr` to your `process.stderr` like the cli does:\n\n```js\nvar selenium = require('selenium-standalone');\nselenium.start({\n  spawnOptions: {\n      stdio: 'inherit'\n  }\n}, function(err, child) {\n  // child.stderr now sent to your `process.stderr`\n});\n```\n\n#### Debug Logs for Selenium Standalone Process\n\nAt times you may need to get debug logs for what `selenium-standalone` is doing. In your environment variables set `DEBUG=selenium-standalone:*`. This will enable extra log statements to be shown in stderr.\n\n**Example:**\n```text\n$ DEBUG=selenium-standalone:* selenium-standalone install --drivers.chrome.version=2.15\n  selenium-standalone:env-details Platform: darwin +0ms\n  selenium-standalone:env-details Architecture: x64 +3ms\n  selenium-standalone:env-details Node.js: v6.9.4 +2ms\n  selenium-standalone:cli Started via CLI with:  [ '/usr/local/bin/node',\n  '/tmp/selenium-standalone/bin/selenium-standalone',\n  'install',\n  '--drivers.chrome.version=2.15' ]\n  ...\n```\n\n### Examples of combining with other tools\n\n- [Gulp + WebdriverIO + Mocha](https://twin.github.io/selenium-testing-workflow-with-webdriverio/)\n\n### Release\n\n```sh\nnpm run release [major|minor|patch|x.x.x]\n```\n\n### Release Docker\n\n ```sh\ncd docker\ndocker build -t vvoyer/selenium-standalone . --rm\ndocker tag vvoyer/selenium-standalone vvoyer/selenium-standalone:x.x\ndocker push vvoyer/selenium-standalone\n```\n\n### `Error: unable to get local issuer certificate`\n\nThis error might happen when you are behind a specific proxy. Then you need to set some environement variables:\n\n```sh\nNODE_TLS_REJECT_UNAUTHORIZED=0 selenium-standalone install`\nNODE_TLS_REJECT_UNAUTHORIZED=0 selenium-standalone start\n```\n\nOn Windows:\n\n```setx NODE_TLS_REJECT_UNAUTHORIZED 0```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/vvo/selenium-standalone.git"
  },
  "scripts": {
    "release": "./scripts/release.sh",
    "start": "DEBUG=selenium-standalone:* ./bin/selenium-standalone install && DEBUG=selenium-standalone:* ./bin/selenium-standalone start",
    "test": "./bin/selenium-standalone install && mocha"
  },
  "version": "6.15.3"
}
